// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(ORGANIZER)
  avatar        String?
  phone         String?
  company       String?
  bio           String?
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  language      String    @default("pt-BR")
  timezone      String    @default("America/Sao_Paulo")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  organizedEvents Event[]      @relation("EventOrganizer")
  registrations   Registration[]
  notifications   Notification[]
  payments       Payment[]
  affiliateCode  String?      @unique
  affiliate      Affiliate?   @relation("UserAffiliate")
  referredUsers  User[]       @relation("UserReferrals")
  referredBy     User?        @relation("UserReferrals", fields: [referredByUserId], references: [id])
  referredByUserId String?
  crmContacts   CRMContact[]
  analytics     UserAnalytics[]
  preferences   UserPreferences?

  @@map("users")
}

model Event {
  id              String        @id @default(cuid())
  title           String
  titleEn         String?       // Título em inglês
  description     String?
  descriptionEn   String?       // Descrição em inglês
  date            DateTime
  time            String?
  duration        Int?          // em horas
  location        String?
  address         String?
  city            String?
  state           String?
  country         String?
  coordinates     Json?         // {lat: number, lng: number}
  capacity        Int
  currentRegistrations Int      @default(0)
  price           Float?
  currency        String        @default("BRL")
  category        EventCategory @default(OTHER)
  status          EventStatus   @default(DRAFT)
  organizerId     String
  organizer       User          @relation("EventOrganizer", fields: [organizerId], references: [id])
  image           String?
  website         String?
  tags            String[]
  tagsEn          String[]      // Tags em inglês
  isPublic        Boolean       @default(true)
  language        String        @default("pt-BR")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relacionamentos
  sessions        Session[]
  registrations   Registration[]
  sponsors        Sponsor[]
  media           Media[]
  coupons         Coupon[]      @relation("EventCoupons")
  analytics       EventAnalytics[]
  crmLeads        CRMLead[]
  affiliates      AffiliateEvent[]

  @@map("events")
}

model Session {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  duration    Int?      // em horas
  speaker     String?
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  registrations SessionRegistration[]

  @@map("sessions")
}

model Registration {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  eventId     String
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status      RegistrationStatus @default(PENDING)
  registeredAt DateTime         @default(now())
  checkedInAt DateTime?
  checkedOutAt DateTime?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relacionamentos
  payment     Payment?
  sessions    SessionRegistration[]
  couponId    String?
  coupon      Coupon?           @relation(fields: [couponId], references: [id])
  certificate Certificate?

  @@unique([userId, eventId])
  @@map("registrations")
}

model SessionRegistration {
  id            String    @id @default(cuid())
  registrationId String
  registration  Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  sessionId     String
  session       Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@unique([registrationId, sessionId])
  @@map("session_registrations")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("BRL")
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod @default(CREDIT_CARD)
  transactionId   String?       @unique
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  registrationId  String        @unique
  registration    Registration  @relation(fields: [registrationId], references: [id])
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relacionamentos
  couponId        String?
  coupon          Coupon?       @relation(fields: [couponId], references: [id])

  @@map("payments")
}

model Sponsor {
  id          String        @id @default(cuid())
  name        String
  logo        String?
  website     String?
  tier        SponsorTier  @default(BRONZE)
  eventId     String
  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("sponsors")
}

model Media {
  id          String      @id @default(cuid())
  title       String
  description String?
  url         String
  type        MediaType   @default(IMAGE)
  eventId     String
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("media")
}

model Notification {
  id          String            @id @default(cuid())
  title       String
  message     String
  type        NotificationType  @default(GENERAL)
  isRead      Boolean           @default(false)
  data        Json?
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("notifications")
}

model Coupon {
  id            String        @id @default(cuid())
  code          String        @unique
  description   String?
  descriptionEn String?       // Descrição em inglês
  discountType  DiscountType  @default(PERCENTAGE)
  discountValue Float
  maxUses       Int?
  currentUses   Int          @default(0)
  validFrom     DateTime
  validUntil    DateTime
  minOrderValue Float?
  maxDiscount   Float?
  isActive      Boolean       @default(true)
  affiliateId   String?      // ID do afiliado que criou o cupom
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relacionamentos
  eventId       String?
  event         Event?        @relation("EventCoupons", fields: [eventId], references: [id])
  registrations Registration[]
  payments      Payment[]
  affiliate     Affiliate?    @relation("AffiliateCoupons", fields: [affiliateId], references: [id])

  @@map("coupons")
}

model Certificate {
  id              String      @id @default(cuid())
  registrationId  String      @unique
  registration    Registration @relation(fields: [registrationId], references: [id])
  certificateCode String      @unique
  issuedAt        DateTime    @default(now())
  expiresAt       DateTime?
  isActive        Boolean     @default(true)
  templateId      String?
  customFields    Json?
  downloadUrl     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("certificates")
}

// NOVOS MODELOS PARA VERSÃO 1.2

// Sistema de Analytics Avançados
model UserAnalytics {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  eventId       String?
  event         Event?    @relation("EventAnalytics", fields: [eventId], references: [id])
  action        String    // LOGIN, REGISTRATION, PAYMENT, CHECKIN, etc.
  metadata      Json?     // Dados adicionais da ação
  ipAddress     String?
  userAgent     String?
  referrer      String?
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  utmTerm       String?
  utmContent    String?
  timestamp     DateTime  @default(now())
  sessionId     String?
  pageUrl       String?
  timeOnPage    Int?      // Tempo em segundos

  @@map("user_analytics")
}

model EventAnalytics {
  id                    String    @id @default(cuid())
  eventId               String
  event                 Event     @relation("EventAnalytics", fields: [eventId], references: [id])
  totalViews            Int       @default(0)
  uniqueViews           Int       @default(0)
  totalRegistrations    Int       @default(0)
  totalRevenue          Float     @default(0)
  conversionRate        Float     @default(0)
  averageSessionTime    Float     @default(0)
  bounceRate            Float     @default(0)
  topReferrers         Json?     // Array de referrers mais comuns
  topDevices           Json?     // Array de dispositivos mais comuns
  topBrowsers          Json?     // Array de navegadores mais comuns
  topCountries         Json?     // Array de países mais comuns
  dailyStats           Json?     // Estatísticas diárias
  weeklyStats          Json?     // Estatísticas semanais
  monthlyStats         Json?     // Estatísticas mensais
  lastUpdated          DateTime  @updatedAt

  @@map("event_analytics")
}

// Sistema de CRM
model CRMContact {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  crmId         String?   // ID no sistema CRM externo
  crmSystem     CRMSystem // Qual sistema CRM
  status        CRMStatus @default(LEAD)
  score         Int       @default(0) // Score de qualificação
  source        String?   // Origem do lead
  notes         String?
  tags          String[]
  lastContact   DateTime?
  nextFollowUp  DateTime?
  assignedTo    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  leads         CRMLead[]
  activities    CRMActivity[]

  @@map("crm_contacts")
}

model CRMLead {
  id            String    @id @default(cuid())
  contactId     String
  contact       CRMContact @relation(fields: [contactId], references: [id])
  eventId       String?
  event         Event?    @relation("EventCRMLeads", fields: [eventId], references: [id])
  status        LeadStatus @default(NEW)
  priority      Priority  @default(MEDIUM)
  value         Float?    // Valor potencial do lead
  source        String?   // Origem do lead
  campaign      String?   // Campanha que gerou o lead
  notes         String?
  assignedTo    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  activities    CRMActivity[]

  @@map("crm_leads")
}

model CRMActivity {
  id            String        @id @default(cuid())
  contactId     String
  contact       CRMContact    @relation(fields: [contactId], references: [id])
  leadId        String?
  lead          CRMLead?      @relation(fields: [leadId], references: [id])
  type          ActivityType  @default(EMAIL)
  subject       String?
  description   String?
  duration      Int?          // Duração em minutos
  outcome       String?
  nextAction    String?
  scheduledFor  DateTime?
  completedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("crm_activities")
}

// Sistema de Afiliados
model Affiliate {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation("UserAffiliate", fields: [userId], references: [id])
  code          String    @unique
  name          String
  email         String
  phone         String?
  website       String?
  socialMedia   Json?     // Links para redes sociais
  commission    Float     @default(10.0) // Percentual de comissão
  status        AffiliateStatus @default(ACTIVE)
  totalEarnings Float     @default(0)
  totalReferrals Int      @default(0)
  conversionRate Float    @default(0)
  paymentInfo   Json?     // Informações de pagamento
  taxInfo       Json?     // Informações fiscais
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  events        AffiliateEvent[]
  coupons       Coupon[]        @relation("AffiliateCoupons")
  referrals     AffiliateReferral[]
  payments      AffiliatePayment[]

  @@map("affiliates")
}

model AffiliateEvent {
  id            String    @id @default(cuid())
  affiliateId   String
  affiliate     Affiliate @relation(fields: [affiliateId], references: [id])
  eventId       String
  event         Event     @relation("EventAffiliates", fields: [eventId], references: [id])
  commission    Float     // Comissão específica para este evento
  isActive      Boolean   @default(true)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([affiliateId, eventId])
  @@map("affiliate_events")
}

model AffiliateReferral {
  id            String    @id @default(cuid())
  affiliateId   String
  affiliate     Affiliate @relation(fields: [affiliateId], references: [id])
  userId        String
  eventId       String?
  registrationId String?
  commission    Float
  status        ReferralStatus @default(PENDING)
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("affiliate_referrals")
}

model AffiliatePayment {
  id            String    @id @default(cuid())
  affiliateId   String
  affiliate     Affiliate @relation(fields: [affiliateId], references: [id])
  amount        Float
  currency      String    @default("BRL")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod @default(BANK_TRANSFER)
  reference     String?   // Referência do pagamento
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("affiliate_payments")
}

// Sistema de Internacionalização
model UserPreferences {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  language      String    @default("pt-BR")
  timezone      String    @default("America/Sao_Paulo")
  dateFormat    String    @default("DD/MM/YYYY")
  timeFormat    String    @default("24h")
  currency      String    @default("BRL")
  notifications Json?     // Preferências de notificação
  theme         String    @default("light")
  accessibility Json?     // Configurações de acessibilidade
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("user_preferences")
}

// Sistema de Tracking de Conversões
model ConversionTracking {
  id            String    @id @default(cuid())
  eventId       String?
  source        String    // Origem da conversão
  medium        String?   // Meio da conversão
  campaign      String?   // Campanha
  term          String?   // Termo de busca
  content       String?   // Conteúdo
  landingPage   String?   // Página de destino
  conversionType String   // Tipo de conversão
  conversionValue Float?  // Valor da conversão
  userId        String?   // Usuário que converteu
  sessionId     String?   // ID da sessão
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime  @default(now())

  @@map("conversion_tracking")
}

// Enums existentes...
enum UserRole {
  ADMIN
  ORGANIZER
  ATTENDEE
  AFFILIATE
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  WEBINAR
  MEETUP
  HACKATHON
  EXHIBITION
  CONCERT
  SPORTS
  OTHER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  CANCELLED
  COMPLETED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
  CHECKED_IN
  CHECKED_OUT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  CASH
  OTHER
}

enum SponsorTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

enum NotificationType {
  REGISTRATION_CONFIRMED
  EVENT_REMINDER
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  EVENT_UPDATED
  EVENT_CANCELLED
  GENERAL
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// NOVOS ENUMS PARA VERSÃO 1.2

enum CRMSystem {
  HUBSPOT
  SALESFORCE
  PIPEDRIVE
  ZAPIER
  CUSTOM
}

enum CRMStatus {
  LEAD
  PROSPECT
  CUSTOMER
  INACTIVE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  EMAIL
  CALL
  MEETING
  TASK
  NOTE
  SOCIAL_MEDIA
  OTHER
}

enum AffiliateStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}
